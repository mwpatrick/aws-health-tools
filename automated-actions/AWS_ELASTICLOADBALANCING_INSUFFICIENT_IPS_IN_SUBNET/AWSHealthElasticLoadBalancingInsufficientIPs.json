{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Automatically delete unused ENIs that are blocking ELB scaling using Amazon Cloudwatch events and AWS Lambda",
    "Metadata": {
        "LICENSE": "Copyright 2016 Amazon Web Services, Inc. or its affiliates. All Rights Reserved. This file is licensed to you under the AWS Customer Agreement (the \"License\"). You may not use this file except in compliance with the License. A copy of the License is located at http://aws.amazon.com/agreement/ . This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and limitations under the License.",
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "General Configuration"
                    },
                    "Parameters": [
                        "DryRun",
                        "MaxENI"
                    ]
                }
            ],
            "ParameterLabels": {
                "DryRun": {
                    "default": "Dry Run"
                },
                "MaxENI": {
                    "default": "Maximum ENI to process"
                }
            }
        }
    },
    "Parameters": {
        "DryRun": {
            "Description": "Set to true to test function without actually deleting ENIs",
            "Type": "String",
            "Default": "true",
            "AllowedValues" : ["true", "false"]
        },
        "MaxENI": {
            "Description": "Number of ENIs to process. Set to 0 to do all the function finds (this may result in account throttling)",
            "Type": "Number",
            "Default": "100"
        }        
    },    "Resources": {
        "LambdaIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AELBInsufficientIPs",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "LambdaLogging",
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                },
                                {
                                    "Sid": "ELBAndENI",
                                    "Action": [
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface",
                                        "elasticloadbalancing:DescribeLoadBalancers"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LambdaFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "// Sample Lambda Function to remove unattached ENIs in the subnets of the ELB",
                                "'use strict';",
                                "var AWS = require('aws-sdk');",
                                "const dryRun = ((process.env.DRY_RUN || 'true') == 'true');",
                                "const maxEniToProcess = process.env.MAX_ENI || 100;",
                                "var ec2 = null;",
                                "",
                                "exports.handler = (event, context, callback) => {",
                                "    var eventName = event.detail.eventTypeCode;",
                                "    var region = event.region;",
                                "    const awsHealthSuccessMessage = `Successfully got details from AWS Health event, ${eventName} and executed automated action.`;",
                                "",
                                "    AWS.config.update({region: region});",
                                "    ec2 = new AWS.EC2();",
                                "    var clb = new AWS.ELB();",
                                "    var alb = new AWS.ELBv2();",
                                "",
                                "    var affectedEntities = event.detail.affectedEntities;",
                                "    console.log ('Event contains %s load balancers; determining associated subnets', affectedEntities.length);",
                                "",
                                "    var promises = [];",
                                "    for ( var i=0; i < affectedEntities.length; i+=1 )",
                                "    {",
                                "        var elbName = affectedEntities[i].entityValue;",
                                "        promises.push(alb.describeLoadBalancers({",
                                "            Names: [elbName]",
                                "        }).promise());",
                                "            ",
                                "        promises.push(clb.describeLoadBalancers({",
                                "            LoadBalancerNames: [elbName]",
                                "        }).promise());",
                                "    }",
                                "    ",
                                "    var subnets = [];",
                                "    Promise.all(promises).then(function(values) {",
                                "            for ( var i=0; i < values.length; i+=1)",
                                "            {",
                                "                var subnet;",
                                "                if (values[i].LoadBalancerDescriptions)",
                                "                {",
                                "                    for (var j=0; j < values[i].LoadBalancerDescriptions[0].Subnets.length; j+=1)",
                                "                    {",
                                "                        subnet = values[i].LoadBalancerDescriptions[0].Subnets[j];",
                                "                        if (subnets.indexOf(subnet) === -1)    subnets.push(subnet);",
                                "                    }",
                                "                } else {",
                                "                    for (var k=0; k < values[i].LoadBalancers[0].AvailabilityZones.length; k+=1)",
                                "                    {",
                                "                        subnet = values[i].LoadBalancers[0].AvailabilityZones[k].SubnetId;",
                                "                        if (subnets.indexOf(subnet) === -1)    subnets.push(subnet);",
                                "                    }",
                                "                }",
                                "            }",
                                "            ",
                                "            if (subnets.length > 0)",
                                "            {",
                                "                var params = {",
                                "                    Filters: [",
                                "                            {Name: 'status',Values: ['available']},",
                                "                            {Name: 'subnet-id',Values: subnets}",
                                "                    ]",
                                "                };",
                                "",
                                "                console.log ('Getting the list of available ENI in the subnets %s', subnets);",
                                "                ec2.describeNetworkInterfaces(params, function(err, data) {",
                                "                    if (err) console.log( region, err, err.stack);",
                                "                    else ",
                                "                    {",
                                "                        var numberToProcess = data.NetworkInterfaces.length;",
                                "                        if ((maxEniToProcess > 0) && (data.NetworkInterfaces.length > maxEniToProcess)) numberToProcess = maxEniToProcess;",
                                "                        console.log('Found %s available ENI; processing %s',data.NetworkInterfaces.length,numberToProcess);",
                                "                        ",
                                "                        for ( var i=0; i < numberToProcess; i+=1) { ",
                                "                            deleteNetworkInterface(data.NetworkInterfaces[i].NetworkInterfaceId,dryRun); ",
                                "                        }",
                                "                        ",
                                "                        callback(null, awsHealthSuccessMessage);",
                                "                    }",
                                "                });",
                                "            }",
                                "            else",
                                "            {",
                                "                console.log('No subnets were found - did the event actually have ELBs?');",
                                "            }",
                                "        }",
                                "    ).catch(function(err) {",
                                "        console.log(err);",
                                "    });",
                                "};",
                                "",
                                "function deleteNetworkInterface (networkInterfaceId, dryrun) {",
                                "    console.log ('Running code to delete ENI %s with Dry Run set to %s', networkInterfaceId, dryrun);",
                                "    var deleteNetworkInterfaceParams = {",
                                "        NetworkInterfaceId: networkInterfaceId,",
                                "        DryRun: dryrun",
                                "    };",
                                "    ec2.deleteNetworkInterface(deleteNetworkInterfaceParams, function(err, data) {",
                                "        if (err) ",
                                "        {",
                                "            switch (err.code)",
                                "            {",
                                "                case 'DryRunOperation':",
                                "                    console.log('Dry run attempt complete for %s after %s retries', networkInterfaceId, this.retryCount);",
                                "                    break;",
                                "                case 'RequestLimitExceeded':",
                                "                    console.log('Request limit exceeded while processing %s after %s retries', networkInterfaceId, this.retryCount);",
                                "                    break;",
                                "                default:",
                                "                    console.log(networkInterfaceId, err, err.stack);    ",
                                "            }",
                                "        }",
                                "        else console.log('ENI %s deleted after %s retries', networkInterfaceId, this.retryCount);",
                                "    });",
                                "}",
                                ""
                            ]
                        ]
                    }
                },
                "Description": "Delete unused ENIs in response to AWS health events",
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaIAMRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs4.3",
                "Timeout": 120,
                "Environment": {
                    "Variables": {
                        "DRY_RUN": {
                            "Ref": "DryRun"
                        },
                        "MAX_ENI": {
                            "Ref": "MaxENI"
                        }
                    }
                }
            },
            "Type": "AWS::Lambda::Function"
        },
        "LambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "CloudWatchEventRule",
                        "Arn"
                    ]
                }
            }
        },
        "CloudWatchEventRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "AWS_ELASTICLOADBALANCING_INSUFFICIENT_IPS_IN_SUBNET",
                "EventPattern": {
                    "source": [
                        "aws.health"
                    ],
                    "detail-type": [
                        "AWS Health Event"
                    ],
                    "detail": {
                        "service": [
                            "ELASTICLOADBALANCING"
                        ],
                        "eventTypeCategory": [
                            "issue"
                        ],
                        "eventTypeCode": [
                            "AWS_ELASTICLOADBALANCING_INSUFFICIENT_IPS_IN_SUBNET"
                        ]
                    }
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "LambdaFunction",
                                "Arn"
                            ]
                        },
                        "Id": "InsufficientIPsFunction"
                    }
                ]
            }
        }
    }
}
